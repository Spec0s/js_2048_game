{"version":3,"sources":["scripts/main.js"],"names":["field","gameField","document","querySelector","gameScore","button","messageLose","messageWin","messageStart","arrUp","arrRight","arrDown","arrLeft","cellsInRow","scoreCount","isGameStarted","startGame","Array","from","length","fill","innerText","placeTile","hasEmptyCells","randomRow","randomColumn","Math","floor","random","setCells","some","row","includes","removeEmptyCells","filter","num","i","j","currentCell","rows","cells","classList","value","add","remove","replace","gameIsLost","slide","emptyCell","merge","newRow","push","slideLeft","slideRight","reverse","slideUp","col","slideDown","addEventListener","e","preventDefault","code"],"mappings":"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","file":"main.e2753cb9.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('tbody');\nconst gameScore = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst arrUp = document.querySelector('.arrow-1');\nconst arrRight = document.querySelector('.arrow-2');\nconst arrDown = document.querySelector('.arrow-3');\nconst arrLeft = document.querySelector('.arrow-4');\nconst cellsInRow = 4;\nlet scoreCount = 0;\nlet field;\nlet isGameStarted = false;\n\nfunction startGame() {\n  isGameStarted = true;\n  field = Array.from({ length: cellsInRow }, () => Array(cellsInRow).fill(0));\n  scoreCount = 0;\n  gameScore.innerText = scoreCount;\n  placeTile();\n  placeTile();\n}\n\nfunction placeTile() {\n  if (!hasEmptyCells()) {\n    return;\n  }\n\n  let randomRow, randomColumn;\n\n  do {\n    randomRow = Math.floor(Math.random() * cellsInRow);\n    randomColumn = Math.floor(Math.random() * cellsInRow);\n  } while (field[randomRow][randomColumn] !== 0);\n  field[randomRow][randomColumn] = Math.random() < 0.9 ? 2 : 4;\n  setCells();\n}\n\nfunction hasEmptyCells() {\n  return field.some(row => row.includes(0));\n}\n\nfunction removeEmptyCells(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction setCells() {\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      const currentCell = gameField.rows[i].cells[j];\n      const num = field[i][j];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field-cell--${num}`);\n      }\n\n      if (num === 2048) {\n        messageWin.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (gameIsLost()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction gameIsLost() {\n  if (hasEmptyCells()) {\n    return false;\n  }\n\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      if (field[i][j] === field[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < cellsInRow - 1; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      if (field[i][j] === field[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n  isGameStarted = false;\n\n  return true;\n}\n\nfunction slide(row) {\n  const emptyCell = hasEmptyCells();\n  let merge = false;\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      merge = true;\n      break;\n    }\n  }\n\n  if (!emptyCell && !merge) {\n    return row;\n  }\n\n  let newRow = removeEmptyCells(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n      gameScore.innerText = scoreCount;\n    }\n  }\n  newRow = removeEmptyCells(newRow);\n\n  while (newRow.length < cellsInRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let row = field[i];\n\n    row = slide(row);\n    field[i] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let row = field[i].reverse();\n\n    row = slide(row).reverse();\n    field[i] = row;\n  }\n}\n\nfunction slideUp() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let col = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    col = slide(col);\n\n    for (let j = 0; j < cellsInRow; j++) {\n      field[j][i] = col[j];\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let col = [field[0][i], field[1][i], field[2][i], field[3][i]].reverse();\n\n    col = slide(col).reverse();\n\n    for (let j = 0; j < cellsInRow; j++) {\n      field[j][i] = col[j];\n    }\n  }\n}\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  startGame();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (!isGameStarted) {\n    return;\n  }\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      placeTile();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      placeTile();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      placeTile();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      placeTile();\n      break;\n  }\n  setCells();\n});\n\narrDown.addEventListener('click', e => {\n  if (!isGameStarted) {\n    return;\n  }\n  slideDown();\n  placeTile();\n});\n\narrLeft.addEventListener('click', e => {\n  if (!isGameStarted) {\n    return;\n  }\n  slideLeft();\n  placeTile();\n});\n\narrRight.addEventListener('click', e => {\n  if (!isGameStarted) {\n    return;\n  }\n  slideRight();\n  placeTile();\n});\n\narrUp.addEventListener('click', e => {\n  if (!isGameStarted) {\n    return;\n  }\n  slideUp();\n  placeTile();\n});\n"]}